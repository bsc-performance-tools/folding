What is the folding ?
--

The folding mechanism allows you to map all the samples from different regions of time of a regular application into a single region in order to generate a detailed results of the application behavior.

The folding mechanism is applied to a particular Paraver events (see step 3). For example, to fold on user functions use the type 60000019 whereas to fold on clusters use the type 90000001. If you are interested on folding other time regions (iterations, for example) you have to emit: an event at the start of the region with any type and a value greater than 0, and a another event at the end of the region with the same type and a value of 0.

It is necessary that in all of these events (user functions, clusters, ...) the hardware counters are read.

Further instructions on how to generate a tracefile with samples can be found in the example installed in:

  /gpfs/apps/CEPBATOOLS/tracing-setup/WithSampling/


These are the steps to run the folding process:
--

1.- (optional) Sort the caller lines using the sort_pcf application. This is useful when analyzing callers in a sampled tracefile.

    Usage: sort_pcf tracefile.prv

    This will generate a tracefile called tracefile.sorted.prv with the caller lines reordered.


2.- Some traces (like clusterized traces) must be preprocessed before applying the folding mechanism. 

    Usage: fuse tracefile.prv

    This will generate a tracefile called tracefile.fused.prv with appropriate records to be folded.


3.- Extract data from the tracefile. This will depend on the data you want to fold.

    Example 1: Folding user functions
       extract -separator 60000019 tracefile.prv

    Example 2: Folding user functions and separating its computation regions using MPI calls
       extract -separator 60000019 -phase-separator 50000001 -phase-separator 50000002 -phase-separator 50000003 tracefile.prv

    Example 3: Folding clusters
       extract -separator 90000001 tracefile.prv

    Any of these commands will report by task & thread extracted files with folded sampled data. The files will look like tracefile.extract.TASK.THREAD, where TASK and THREAD are values from 0 to MAXTASK-1 or 0 to MAXTHREAD-1 respectively.

4.- Interpolate extracted data.

    Example 1: Interpolate total instructions and generating gnuplots of task 0 thread 3.
      interpolate -counter PAPI_TOT_INS -generate-gnuplot yes tracefile.extract.0.3

    Example 2: Interpolate total instructions and l2D cache misses and generating gnuplots of task 3 thread 1.
      interpolate -counter PAPI_TOT_INS -counter PAPI_L2_DCM -generate-gnuplot yes tracefile.extract.3.1

    Example 3: Interpolate total instructions and l2D cache misses and generating gnuplots of task 3 thread 1, now removing outliers that are outside the 95% of Interval of Confidence -using time & instructions -.
      interpolate -counter PAPI_TOT_INS -counter PAPI_L2_DCM -generate-gnuplot yes -remove-outliers 2.0 tracefile.extract.3.1

    Example 4: Interpolate total instructions and l2D cache misses and generating gnuplots of task 3 thread 1 removing computation phases that last less than 1 millisecond.
      interpolate -counter PAPI_TOT_INS -counter PAPI_L2_DCM -generate-gnuplot yes -min-duration 1 tracefile.extract.3.1

    Example 5: Interpolate total instructions of task 0 thread 0 and reintroduce on the Paraver tracefile using the event type/value marker 123456/1
      interpolate -counter PAPI_TOT_INS -feed-region 123456 1 tracefile.extract.0.0 

    Example 6: Interpolate total instructions of task 0 thread 0 and reintroduce on the Paraver tracefile between timestamps 100 and 200
      interpolate -counter PAPI_TOT_INS -feed-time 100 200 tracefile.extract.0.0 

